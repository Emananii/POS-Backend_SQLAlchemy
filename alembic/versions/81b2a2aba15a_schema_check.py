"""Schema check

Revision ID: 81b2a2aba15a
Revises: 4aac1ab0a4d8
Create Date: 2025-05-31 16:32:11.772611

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '81b2a2aba15a'
down_revision: Union[str, None] = '4aac1ab0a4d8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_customer_email'), table_name='customers')
    op.drop_index(op.f('idx_customer_name'), table_name='customers')
    op.drop_table('customers')
    op.drop_index(op.f('idx_sales_customer_id'), table_name='sales')
    op.drop_index(op.f('idx_sales_timestamp'), table_name='sales')
    op.drop_table('sales')
    op.drop_table('products')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.drop_table('categories')
    op.drop_table('sale_items')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sale_items',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('sale_id', sa.INTEGER(), nullable=False),
    sa.Column('product_id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('quantity', sa.INTEGER(), nullable=False),
    sa.Column('price_at_sale', sa.FLOAT(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['sale_id'], ['sales.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=True),
    sa.Column('description', sa.VARCHAR(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=1)
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('brand', sa.VARCHAR(), nullable=False),
    sa.Column('purchase_price', sa.FLOAT(), nullable=False),
    sa.Column('selling_price', sa.FLOAT(), nullable=False),
    sa.Column('stock', sa.INTEGER(), nullable=True),
    sa.Column('image', sa.VARCHAR(), nullable=True),
    sa.Column('barcode', sa.VARCHAR(), nullable=True),
    sa.Column('category_id', sa.INTEGER(), nullable=True),
    sa.Column('unit', sa.VARCHAR(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('barcode')
    )
    op.create_table('sales',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('customer_id', sa.INTEGER(), nullable=False),
    sa.Column('timestamp', sa.DATETIME(), nullable=True),
    sa.Column('total_amount', sa.FLOAT(), nullable=False),
    sa.CheckConstraint('total_amount >= 0', name=op.f('check_total_amount_positive')),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('idx_sales_timestamp'), 'sales', ['timestamp'], unique=False)
    op.create_index(op.f('idx_sales_customer_id'), 'sales', ['customer_id'], unique=False)
    op.create_table('customers',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), nullable=False),
    sa.Column('phone', sa.VARCHAR(length=15), nullable=True),
    sa.Column('customer_type', sa.VARCHAR(length=50), nullable=True),
    sa.Column('company_name', sa.VARCHAR(length=100), nullable=True),
    sa.Column('loyalty_points', sa.INTEGER(), nullable=True),
    sa.Column('discount_rate', sa.INTEGER(), nullable=True),
    sa.CheckConstraint('email != ""', name=op.f('check_email_not_empty')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_customer_id')),
    sa.UniqueConstraint('email', name=op.f('uq_customer_email'))
    )
    op.create_index(op.f('idx_customer_name'), 'customers', ['name'], unique=False)
    op.create_index(op.f('idx_customer_email'), 'customers', ['email'], unique=False)
    # ### end Alembic commands ###
